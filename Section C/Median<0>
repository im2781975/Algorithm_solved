#include <bits/stdc++.h>
using namespace std;
 
double getMedian(int arr1[], int arr2[], int n)
{
    // according to given constraints all numbers are in
    // this range
    int low = (int)-1e9, high = (int)1e9;
 
    int pos = n;
    double ans = 0.0;
    // binary search to find the element which will be
    // present at pos = totalLen/2 after merging two
    // arrays in sorted order
    while (low <= high) {
        int mid = low + ((high - low) >> 1);
 
        // total number of elements in arrays which are
        // less than mid
        int ub = upper_bound(arr1, arr1 + n, mid) - arr1
                 + upper_bound(arr2, arr2 + n, mid) - arr2;
 
        if (ub <= pos)
            low = mid + 1;
        else
            high = mid - 1;
    }
 
    ans = low;
 
    // As there are even number of elements, we will
    // also have to find element at pos = totalLen/2 - 1
    pos--;
    low = (int)-1e9;
    high = (int)1e9;
    while (low <= high) {
        int mid = low + ((high - low) >> 1);
        int ub = upper_bound(arr1, arr1 + n, mid) - arr1
                 + upper_bound(arr2, arr2 + n, mid) - arr2;
 
        if (ub <= pos)
            low = mid + 1;
        else
            high = mid - 1;
    }
 
    // average of two elements in case of even
    // number of elements
    ans = (ans + low) / 2;
 
    return ans;
}
 
int main()
{
    int arr1[] = { 1, 4, 5, 6, 10 };
    int arr2[] = { 2, 3, 4, 5, 7 };
 
    int n = sizeof(arr1) / sizeof(arr1[0]);
 
    double median = getMedian(arr1, arr2, n);
 
    cout << "Median is " << median << endl;
 
    return 0;
}

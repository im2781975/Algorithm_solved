#include <bits/stdc++.h>
using namespace std;
 
// Method to find median
double Median(vector<int>& A, vector<int>& B)
{
    int i;
    int n = A.size();
    int m = B.size();
    // initializing Priority Queue (Min Heap)
    priority_queue<int, vector<int>, greater<int> > pq;
    // pushing array A values to priority Queue
    for (i = 0; i < n; i++)
        pq.push(A[i]);
    // pushing array B values to priority Queue
    for (i = 0; i < m; i++)
        pq.push(B[i]);
    int check = n + m;
    double count = -1;
    double mid1, mid2;
    while (!pq.empty()) {
        count++;
        // returning mid value if combined length(n+m) is
        // odd
        if (check % 2 != 0 && count == check / 2) {
            double ans = pq.top();
            return ans;
        }
        // maintaining mid1 value if combined length(n+m) is
        // even where we need to maintain both mid values in
        // case of even combined length
        if (check % 2 == 0 && count == (check / 2) - 1)
            mid1 = pq.top();
        // now returning the mid2 value with previous
        // maintained mid1 value by 2
        if (check % 2 == 0 && count == check / 2) {
            mid2 = pq.top();
            double ans = (mid1 + mid2) / 2;
            return ans;
        }
        pq.pop();
    }
    return 0.00000;
}
 
// Driver code
int main()
{
    vector<int> arr1 = { -2, 3, 4, 5 };
    vector<int> arr2 = { -4, -1, 7, 8, 9 };
    cout << "Median of the two arrays are" << endl;
    cout << Median(arr1, arr2);
    return 0;
}

// C++ code to implement the approach
 
#include <bits/stdc++.h>
using namespace std;
 
// Function to find a Monotonic
// decreasing stack
void decreasingStack(int arr[], int N)
{
    // Initialising Stack
    stack<int> stk;
 
    for (int i = 0; i < N; i++) {
 
        // Either stack empty or
        // all smaller nums are popped off
        while (stk.size() > 0 && stk.top() < arr[i]) {
            stk.pop();
        }
        stk.push(arr[i]);
    }
 
    int N2 = stk.size();
    int ans[N2] = { 0 };
    int j = N2 - 1;
 
    // Empty stack
    while (!stk.empty()) {
 
        ans[j] = stk.top();
        stk.pop();
        j--;
    }
 
    // Displaying the original array
    cout << "The Array: ";
    for (int i = 0; i < N; i++) {
 
        cout << arr[i] << " ";
    }
    cout << endl;
 
    // Displaying Monotonic Decreasing Stack
    cout << "The Stack: ";
    for (int i = 0; i < N2; i++) {
 
        cout << ans[i] << " ";
    }
    cout << endl;
}
 
// Driver code
int main()
{
    int arr[] = { 15, 17, 12, 13, 14, 10 };
    int N = sizeof(arr) / sizeof(arr[0]);
 
    // Function call
    decreasingStack(arr, N);
 
    return 0;
}

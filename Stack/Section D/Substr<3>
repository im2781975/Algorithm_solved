// C++ program to implement the above approach
 
#include <bits/stdc++.h>
using namespace std;
 
// Function to return the length of
// the longest valid substring
int lonParen(int i, string& s, vector<int>& memo)
{
    // base condition
    if (i <= 0) {
        return 0;
    }
    // checking if value already present in the dp array
    if (memo[i] != -1) {
        return memo[i];
    }
    // check for beginning bracket
    if (s[i] == '(') {
        memo[i] = 0;
    } // check if beginning and ending brackets satisfy
    else if (s[i] == ')' && s[i - 1] == '(') {
        memo[i] = lonParen(i - 2, s, memo) + 2;
    }
    // check if the bracket at the ith position is same as
    // bracket at i-1th position
    else if (s[i] == ')' && s[i - 1] == ')') {
        int len = lonParen(i - 1, s, memo);
        if (i - 1 - len >= 0 && s[i - 1 - len] == '(') {
            memo[i]
                = len + 2 + lonParen(i - len - 2, s, memo);
        }
        else {
            // if none of the condition satisfy store 0 in
            // the dp array
            memo[i] = 0;
        }
    }
    // return the value at the last index
    return memo[i];
}
 
int longestValidParentheses(string s)
{
 
    int n = s.size(), maxLen = 0;
    // dp vector for storing the results
    vector<int> memo(n, -1);
    // getting the maximum length
    for (int i = 0; i < n; i++) {
        maxLen = max(maxLen, lonParen(i, s, memo));
    }
    // return the maximum length
    return maxLen;
}
// Driver code
int main()
{
 
    // Function call
    cout << longestValidParentheses("((()()()()(((())");
    return 0;
}
